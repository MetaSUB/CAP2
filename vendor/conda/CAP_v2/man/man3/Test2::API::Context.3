.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2::API::Context 3"
.TH Test2::API::Context 3 "2018-03-23" "perl v5.26.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::API::Context \- Object to represent a testing context.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The context object is the primary interface for authors of testing tools
written with Test2. The context object represents the context in
which a test takes place (File and Line Number), and provides a quick way to
generate events from that context. The context object also takes care of
sending events to the correct Test2::Hub instance.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In general you will not be creating contexts directly. To obtain a context you
should always use \f(CW\*(C`context()\*(C'\fR which is exported by the Test2::API module.
.PP
.Vb 1
\&    use Test2::API qw/context/;
\&
\&    sub my_ok {
\&        my ($bool, $name) = @_;
\&        my $ctx = context();
\&        $ctx\->ok($bool, $name);
\&        $ctx\->release; # You MUST do this!
\&        return $bool;
\&    }
.Ve
.PP
Context objects make it easy to wrap other tools that also use context. Once
you grab a context, any tool you call before releasing your context will
inherit it:
.PP
.Vb 4
\&    sub wrapper {
\&        my ($bool, $name) = @_;
\&        my $ctx = context();
\&        $ctx\->diag("wrapping my_ok");
\&
\&        my $out = my_ok($bool, $name);
\&        $ctx\->release; # You MUST do this!
\&        return $out;
\&    }
.Ve
.SH "CRITICAL DETAILS"
.IX Header "CRITICAL DETAILS"
.IP "you \s-1MUST\s0 always use the \fIcontext()\fR sub from Test2::API" 4
.IX Item "you MUST always use the context() sub from Test2::API"
Creating your own context via \f(CW\*(C`Test2::API::Context\->new()\*(C'\fR will almost never
produce a desirable result. Use \f(CW\*(C`context()\*(C'\fR which is exported by Test2::API.
.Sp
There are a handful of cases where a tool author may want to create a new
context by hand, which is why the \f(CW\*(C`new\*(C'\fR method exists. Unless you really know
what you are doing you should avoid this.
.IP "You \s-1MUST\s0 always release the context when done with it" 4
.IX Item "You MUST always release the context when done with it"
Releasing the context tells the system you are done with it. This gives it a
chance to run any necessary callbacks or cleanup tasks. If you forget to
release the context it will try to detect the problem and warn you about it.
.IP "You \s-1MUST NOT\s0 pass context objects around" 4
.IX Item "You MUST NOT pass context objects around"
When you obtain a context object it is made specifically for your tool and any
tools nested within. If you pass a context around you run the risk of polluting
other tools with incorrect context information.
.Sp
If you are certain that you want a different tool to use the same context you
may pass it a snapshot. \f(CW\*(C`$ctx\->snapshot\*(C'\fR will give you a shallow clone of
the context that is safe to pass around or store.
.IP "You \s-1MUST NOT\s0 store or cache a context for later" 4
.IX Item "You MUST NOT store or cache a context for later"
As long as a context exists for a given hub, all tools that try to get a
context will get the existing instance. If you try to store the context you
will pollute other tools with incorrect context information.
.Sp
If you are certain that you want to save the context for later, you can use a
snapshot. \f(CW\*(C`$ctx\->snapshot\*(C'\fR will give you a shallow clone of the context
that is safe to pass around or store.
.Sp
\&\f(CW\*(C`context()\*(C'\fR has some mechanisms to protect you if you do cause a context to
persist beyond the scope in which it was obtained. In practice you should not
rely on these protections, and they are fairly noisy with warnings.
.IP "You \s-1SHOULD\s0 obtain your context as soon as possible in a given tool" 4
.IX Item "You SHOULD obtain your context as soon as possible in a given tool"
You never know what tools you call from within your own tool will need a
context. Obtaining the context early ensures that nested tools can find the
context you want them to find.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$ctx\->done_testing;" 4
.el .IP "\f(CW$ctx\fR\->done_testing;" 4
.IX Item "$ctx->done_testing;"
Note that testing is finished. If no plan has been set this will generate a
Plan event.
.ie n .IP "$clone = $ctx\->\fIsnapshot()\fR" 4
.el .IP "\f(CW$clone\fR = \f(CW$ctx\fR\->\fIsnapshot()\fR" 4
.IX Item "$clone = $ctx->snapshot()"
This will return a shallow clone of the context. The shallow clone is safe to
store for later.
.ie n .IP "$ctx\->\fIrelease()\fR" 4
.el .IP "\f(CW$ctx\fR\->\fIrelease()\fR" 4
.IX Item "$ctx->release()"
This will release the context. This runs cleanup tasks, and several important
hooks. It will also restore \f(CW$!\fR, \f(CW$?\fR, and \f(CW$@\fR to what they were when the
context was created.
.Sp
\&\fBNote:\fR If a context is acquired more than once an internal refcount is kept.
\&\f(CW\*(C`release()\*(C'\fR decrements the ref count, none of the other actions of
\&\f(CW\*(C`release()\*(C'\fR will occur unless the refcount hits 0. This means only the last
call to \f(CW\*(C`release()\*(C'\fR will reset \f(CW$?\fR, \f(CW$!\fR, \f(CW$@\fR,and run the cleanup tasks.
.ie n .IP "$ctx\->throw($message)" 4
.el .IP "\f(CW$ctx\fR\->throw($message)" 4
.IX Item "$ctx->throw($message)"
This will throw an exception reporting to the file and line number of the
context. This will also release the context for you.
.ie n .IP "$ctx\->alert($message)" 4
.el .IP "\f(CW$ctx\fR\->alert($message)" 4
.IX Item "$ctx->alert($message)"
This will issue a warning from the file and line number of the context.
.ie n .IP "$stack = $ctx\->\fIstack()\fR" 4
.el .IP "\f(CW$stack\fR = \f(CW$ctx\fR\->\fIstack()\fR" 4
.IX Item "$stack = $ctx->stack()"
This will return the Test2::API::Stack instance the context used to find
the current hub.
.ie n .IP "$hub = $ctx\->\fIhub()\fR" 4
.el .IP "\f(CW$hub\fR = \f(CW$ctx\fR\->\fIhub()\fR" 4
.IX Item "$hub = $ctx->hub()"
This will return the Test2::Hub instance the context recognizes as the
current one to which all events should be sent.
.ie n .IP "$dbg = $ctx\->\fItrace()\fR" 4
.el .IP "\f(CW$dbg\fR = \f(CW$ctx\fR\->\fItrace()\fR" 4
.IX Item "$dbg = $ctx->trace()"
This will return the Test2::Util::Trace instance used by the context.
.ie n .IP "$ctx\->do_in_context(\e&code, @args);" 4
.el .IP "\f(CW$ctx\fR\->do_in_context(\e&code, \f(CW@args\fR);" 4
.IX Item "$ctx->do_in_context(&code, @args);"
Sometimes you have a context that is not current, and you want things to use it
as the current one. In these cases you can call
\&\f(CW\*(C`$ctx\->do_in_context(sub { ... })\*(C'\fR. The codeblock will be run, and
anything inside of it that looks for a context will find the one on which the
method was called.
.Sp
This \fB\s-1DOES NOT\s0\fR affect context on other hubs, only the hub used by the context
will be affected.
.Sp
.Vb 4
\&    my $ctx = ...;
\&    $ctx\->do_in_context(sub {
\&        my $ctx = context(); # returns the $ctx the sub is called on
\&    });
.Ve
.Sp
\&\fBNote:\fR The context will actually be cloned, the clone will be used instead of
the original. This allows the thread id, process id, and error variables to be correct without
modifying the original context.
.ie n .IP "$ctx\->\fIrestore_error_vars()\fR" 4
.el .IP "\f(CW$ctx\fR\->\fIrestore_error_vars()\fR" 4
.IX Item "$ctx->restore_error_vars()"
This will set \f(CW$!\fR, \f(CW$?\fR, and \f(CW$@\fR to what they were when the context was
created. There is no localization or anything done here, calling this method
will actually set these vars.
.ie n .IP "$! = $ctx\->\fIerrno()\fR" 4
.el .IP "$! = \f(CW$ctx\fR\->\fIerrno()\fR" 4
.IX Item "$! = $ctx->errno()"
The (numeric) value of \f(CW$!\fR when the context was created.
.ie n .IP "$? = $ctx\->\fIchild_error()\fR" 4
.el .IP "$? = \f(CW$ctx\fR\->\fIchild_error()\fR" 4
.IX Item "$? = $ctx->child_error()"
The value of \f(CW$?\fR when the context was created.
.ie n .IP "$@ = $ctx\->\fIeval_error()\fR" 4
.el .IP "$@ = \f(CW$ctx\fR\->\fIeval_error()\fR" 4
.IX Item "$@ = $ctx->eval_error()"
The value of \f(CW$@\fR when the context was created.
.SS "\s-1EVENT PRODUCTION METHODS\s0"
.IX Subsection "EVENT PRODUCTION METHODS"
.ie n .IP "$event = $ctx\->ok($bool, $name)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->ok($bool, \f(CW$name\fR)" 4
.IX Item "$event = $ctx->ok($bool, $name)"
.PD 0
.ie n .IP "$event = $ctx\->ok($bool, $name, \e@on_fail)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->ok($bool, \f(CW$name\fR, \e@on_fail)" 4
.IX Item "$event = $ctx->ok($bool, $name, @on_fail)"
.PD
This will create an Test2::Event::Ok object for you. If \f(CW$bool\fR is false
then an Test2::Event::Diag event will be sent as well with details about the
failure. If you do not want automatic diagnostics you should use the
\&\f(CW\*(C`send_event()\*(C'\fR method directly.
.Sp
The third argument \f(CW\*(C`\e@on_fail\*(C'\fR) is an optional set of diagnostics to be sent in
the event of a test failure. Plain strings will be sent as
Test2::Event::Diag events. References will be used to construct
Test2::Event::Info events with \f(CW\*(C`diagnostics => 1\*(C'\fR.
.ie n .IP "$event = $ctx\->info($renderer, diagnostics => $bool, %other_params)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->info($renderer, diagnostics => \f(CW$bool\fR, \f(CW%other_params\fR)" 4
.IX Item "$event = $ctx->info($renderer, diagnostics => $bool, %other_params)"
Send an Test2::Event::Info.
.ie n .IP "$event = $ctx\->note($message)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->note($message)" 4
.IX Item "$event = $ctx->note($message)"
Send an Test2::Event::Note. This event prints a message to \s-1STDOUT.\s0
.ie n .IP "$event = $ctx\->diag($message)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->diag($message)" 4
.IX Item "$event = $ctx->diag($message)"
Send an Test2::Event::Diag. This event prints a message to \s-1STDERR.\s0
.ie n .IP "$event = $ctx\->plan($max)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->plan($max)" 4
.IX Item "$event = $ctx->plan($max)"
.PD 0
.ie n .IP "$event = $ctx\->plan(0, '\s-1SKIP\s0', $reason)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->plan(0, '\s-1SKIP\s0', \f(CW$reason\fR)" 4
.IX Item "$event = $ctx->plan(0, 'SKIP', $reason)"
.PD
This can be used to send an Test2::Event::Plan event. This event
usually takes either a number of tests you expect to run. Optionally you can
set the expected count to 0 and give the '\s-1SKIP\s0' directive with a reason to
cause all tests to be skipped.
.ie n .IP "$event = $ctx\->skip($name, $reason);" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->skip($name, \f(CW$reason\fR);" 4
.IX Item "$event = $ctx->skip($name, $reason);"
Send an Test2::Event::Skip event.
.ie n .IP "$event = $ctx\->bail($reason)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->bail($reason)" 4
.IX Item "$event = $ctx->bail($reason)"
This sends an Test2::Event::Bail event. This event will completely
terminate all testing.
.ie n .IP "$event = $ctx\->send_event($Type, %parameters)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->send_event($Type, \f(CW%parameters\fR)" 4
.IX Item "$event = $ctx->send_event($Type, %parameters)"
This lets you build and send an event of any type. The \f(CW$Type\fR argument should
be the event package name with \f(CW\*(C`Test2::Event::\*(C'\fR left off, or a fully
qualified package name prefixed with a '+'. The event is returned after it is
sent.
.Sp
.Vb 1
\&    my $event = $ctx\->send_event(\*(AqOk\*(Aq, ...);
.Ve
.Sp
or
.Sp
.Vb 1
\&    my $event = $ctx\->send_event(\*(Aq+Test2::Event::Ok\*(Aq, ...);
.Ve
.ie n .IP "$event = $ctx\->build_event($Type, %parameters)" 4
.el .IP "\f(CW$event\fR = \f(CW$ctx\fR\->build_event($Type, \f(CW%parameters\fR)" 4
.IX Item "$event = $ctx->build_event($Type, %parameters)"
This is the same as \f(CW\*(C`send_event()\*(C'\fR, except it builds and returns the event
without sending it.
.SH "HOOKS"
.IX Header "HOOKS"
There are 2 types of hooks, init hooks, and release hooks. As the names
suggest, these hooks are triggered when contexts are created or released.
.SS "\s-1INIT HOOKS\s0"
.IX Subsection "INIT HOOKS"
These are called whenever a context is initialized. That means when a new
instance is created. These hooks are \fB\s-1NOT\s0\fR called every time something
requests a context, just when a new one is created.
.PP
\fI\s-1GLOBAL\s0\fR
.IX Subsection "GLOBAL"
.PP
This is how you add a global init callback. Global callbacks happen for every
context for any hub or stack.
.PP
.Vb 4
\&    Test2::API::test2_add_callback_context_init(sub {
\&        my $ctx = shift;
\&        ...
\&    });
.Ve
.PP
\fI\s-1PER HUB\s0\fR
.IX Subsection "PER HUB"
.PP
This is how you add an init callback for all contexts created for a given hub.
These callbacks will not run for other hubs.
.PP
.Vb 4
\&    $hub\->add_context_init(sub {
\&        my $ctx = shift;
\&        ...
\&    });
.Ve
.PP
\fI\s-1PER CONTEXT\s0\fR
.IX Subsection "PER CONTEXT"
.PP
This is how you specify an init hook that will only run if your call to
\&\f(CW\*(C`context()\*(C'\fR generates a new context. The callback will be ignored if
\&\f(CW\*(C`context()\*(C'\fR is returning an existing context.
.PP
.Vb 4
\&    my $ctx = context(on_init => sub {
\&        my $ctx = shift;
\&        ...
\&    });
.Ve
.SS "\s-1RELEASE HOOKS\s0"
.IX Subsection "RELEASE HOOKS"
These are called whenever a context is released. That means when the last
reference to the instance is about to be destroyed. These hooks are \fB\s-1NOT\s0\fR
called every time \f(CW\*(C`$ctx\->release\*(C'\fR is called.
.PP
\fI\s-1GLOBAL\s0\fR
.IX Subsection "GLOBAL"
.PP
This is how you add a global release callback. Global callbacks happen for every
context for any hub or stack.
.PP
.Vb 4
\&    Test2::API::test2_add_callback_context_release(sub {
\&        my $ctx = shift;
\&        ...
\&    });
.Ve
.PP
\fI\s-1PER HUB\s0\fR
.IX Subsection "PER HUB"
.PP
This is how you add a release callback for all contexts created for a given
hub. These callbacks will not run for other hubs.
.PP
.Vb 4
\&    $hub\->add_context_release(sub {
\&        my $ctx = shift;
\&        ...
\&    });
.Ve
.PP
\fI\s-1PER CONTEXT\s0\fR
.IX Subsection "PER CONTEXT"
.PP
This is how you add release callbacks directly to a context. The callback will
\&\fB\s-1ALWAYS\s0\fR be added to the context that gets returned, it does not matter if a
new one is generated, or if an existing one is returned.
.PP
.Vb 4
\&    my $ctx = context(on_release => sub {
\&        my $ctx = shift;
\&        ...
\&    });
.Ve
.SH "THIRD PARTY META-DATA"
.IX Header "THIRD PARTY META-DATA"
This object consumes Test2::Util::ExternalMeta which provides a consistent
way for you to attach meta-data to instances of this class. This is useful for
tools, plugins, and other extensions.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.IP "Kent Fredric <kentnl@cpan.org>" 4
.IX Item "Kent Fredric <kentnl@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2016 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
